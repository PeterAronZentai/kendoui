///<reference path="./jaydata.d.ts" />
/*//////////////////////////////////////////////////////////////////////////////////////
////// Autogenerated by JaySvcUtil.exe http://JayData.org for more info        /////////
//////                      oData V2 TypeScript                                /////////
//////////////////////////////////////////////////////////////////////////////////////*/


module NorthwindModel {
  class Category extends $data.Entity {
    constructor ();
    constructor (initData: { Category_ID?: number; Category_Name?: string; Description?: string; Picture?: $data.Blob; Products?: NorthwindModel.Product[]; });
    Category_ID: number;
    Category_Name: string;
    Description: string;
    Picture: $data.Blob;
    Products: NorthwindModel.Product[];
    
  }

  export interface CategoryQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Category) => bool): NorthwindModel.CategoryQueryable;
    filter(predicate:(it: NorthwindModel.Category) => bool, thisArg: any): NorthwindModel.CategoryQueryable;

    map(projection: (it: NorthwindModel.Category) => any): NorthwindModel.CategoryQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Category) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Category[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Category[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Category, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Category) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Category, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Category[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.CategoryQueryable;
    skip(amout: number): NorthwindModel.CategoryQueryable;

    order(selector: string): NorthwindModel.CategoryQueryable;
    orderBy(predicate: (it: NorthwindModel.Category) => any): NorthwindModel.CategoryQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Category) => any): NorthwindModel.CategoryQueryable;
    
    first(predicate: (it: NorthwindModel.Category, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Category) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Category, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Category[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.CategoryQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface CategorySet extends CategoryQueryable {
    add(initData: { Category_ID?: number; Category_Name?: string; Description?: string; Picture?: $data.Blob; Products?: NorthwindModel.Product[]; }): NorthwindModel.Category;
    add(item: NorthwindModel.Category): NorthwindModel.Category;

    attach(item: NorthwindModel.Category): void;
    attach(item: { Category_ID: number; }): void;
    attachOrGet(item: NorthwindModel.Category): NorthwindModel.Category;
    attachOrGet(item: { Category_ID: number; }): NorthwindModel.Category;

    detach(item: NorthwindModel.Category): void;
    detach(item: { Category_ID: number; }): void;

    remove(item: NorthwindModel.Category): void;
    remove(item: { Category_ID: number; }): void;
    
    elementType: new (initData: { Category_ID?: number; Category_Name?: string; Description?: string; Picture?: $data.Blob; Products?: NorthwindModel.Product[]; }) => NorthwindModel.Category;
  }

  class Customer extends $data.Entity {
    constructor ();
    constructor (initData: { Customer_ID?: string; Company_Name?: string; Contact_Name?: string; Contact_Title?: string; Address?: string; City?: string; Region?: string; Postal_Code?: string; Country?: string; Phone?: string; Fax?: string; Orders?: NorthwindModel.Order[]; });
    Customer_ID: string;
    Company_Name: string;
    Contact_Name: string;
    Contact_Title: string;
    Address: string;
    City: string;
    Region: string;
    Postal_Code: string;
    Country: string;
    Phone: string;
    Fax: string;
    Orders: NorthwindModel.Order[];
    
  }

  export interface CustomerQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Customer) => bool): NorthwindModel.CustomerQueryable;
    filter(predicate:(it: NorthwindModel.Customer) => bool, thisArg: any): NorthwindModel.CustomerQueryable;

    map(projection: (it: NorthwindModel.Customer) => any): NorthwindModel.CustomerQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Customer) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Customer[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Customer[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Customer, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Customer) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Customer, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Customer[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.CustomerQueryable;
    skip(amout: number): NorthwindModel.CustomerQueryable;

    order(selector: string): NorthwindModel.CustomerQueryable;
    orderBy(predicate: (it: NorthwindModel.Customer) => any): NorthwindModel.CustomerQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Customer) => any): NorthwindModel.CustomerQueryable;
    
    first(predicate: (it: NorthwindModel.Customer, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Customer) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Customer, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Customer[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.CustomerQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface CustomerSet extends CustomerQueryable {
    add(initData: { Customer_ID?: string; Company_Name?: string; Contact_Name?: string; Contact_Title?: string; Address?: string; City?: string; Region?: string; Postal_Code?: string; Country?: string; Phone?: string; Fax?: string; Orders?: NorthwindModel.Order[]; }): NorthwindModel.Customer;
    add(item: NorthwindModel.Customer): NorthwindModel.Customer;

    attach(item: NorthwindModel.Customer): void;
    attach(item: { Customer_ID: string; }): void;
    attachOrGet(item: NorthwindModel.Customer): NorthwindModel.Customer;
    attachOrGet(item: { Customer_ID: string; }): NorthwindModel.Customer;

    detach(item: NorthwindModel.Customer): void;
    detach(item: { Customer_ID: string; }): void;

    remove(item: NorthwindModel.Customer): void;
    remove(item: { Customer_ID: string; }): void;
    
    elementType: new (initData: { Customer_ID?: string; Company_Name?: string; Contact_Name?: string; Contact_Title?: string; Address?: string; City?: string; Region?: string; Postal_Code?: string; Country?: string; Phone?: string; Fax?: string; Orders?: NorthwindModel.Order[]; }) => NorthwindModel.Customer;
  }

  class Employee extends $data.Entity {
    constructor ();
    constructor (initData: { Employee_ID?: number; Last_Name?: string; First_Name?: string; Title?: string; Birth_Date?: Date; Hire_Date?: Date; Address?: string; City?: string; Region?: string; Postal_Code?: string; Country?: string; Home_Phone?: string; Extension?: string; Photo?: $data.Blob; Notes?: string; Reports_To?: number; Orders?: NorthwindModel.Order[]; });
    Employee_ID: number;
    Last_Name: string;
    First_Name: string;
    Title: string;
    Birth_Date: Date;
    Hire_Date: Date;
    Address: string;
    City: string;
    Region: string;
    Postal_Code: string;
    Country: string;
    Home_Phone: string;
    Extension: string;
    Photo: $data.Blob;
    Notes: string;
    Reports_To: number;
    Orders: NorthwindModel.Order[];
    
  }

  export interface EmployeeQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Employee) => bool): NorthwindModel.EmployeeQueryable;
    filter(predicate:(it: NorthwindModel.Employee) => bool, thisArg: any): NorthwindModel.EmployeeQueryable;

    map(projection: (it: NorthwindModel.Employee) => any): NorthwindModel.EmployeeQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Employee) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Employee[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Employee[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Employee, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Employee) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Employee, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Employee[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.EmployeeQueryable;
    skip(amout: number): NorthwindModel.EmployeeQueryable;

    order(selector: string): NorthwindModel.EmployeeQueryable;
    orderBy(predicate: (it: NorthwindModel.Employee) => any): NorthwindModel.EmployeeQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Employee) => any): NorthwindModel.EmployeeQueryable;
    
    first(predicate: (it: NorthwindModel.Employee, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Employee) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Employee, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Employee[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.EmployeeQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface EmployeeSet extends EmployeeQueryable {
    add(initData: { Employee_ID?: number; Last_Name?: string; First_Name?: string; Title?: string; Birth_Date?: Date; Hire_Date?: Date; Address?: string; City?: string; Region?: string; Postal_Code?: string; Country?: string; Home_Phone?: string; Extension?: string; Photo?: $data.Blob; Notes?: string; Reports_To?: number; Orders?: NorthwindModel.Order[]; }): NorthwindModel.Employee;
    add(item: NorthwindModel.Employee): NorthwindModel.Employee;

    attach(item: NorthwindModel.Employee): void;
    attach(item: { Employee_ID: number; }): void;
    attachOrGet(item: NorthwindModel.Employee): NorthwindModel.Employee;
    attachOrGet(item: { Employee_ID: number; }): NorthwindModel.Employee;

    detach(item: NorthwindModel.Employee): void;
    detach(item: { Employee_ID: number; }): void;

    remove(item: NorthwindModel.Employee): void;
    remove(item: { Employee_ID: number; }): void;
    
    elementType: new (initData: { Employee_ID?: number; Last_Name?: string; First_Name?: string; Title?: string; Birth_Date?: Date; Hire_Date?: Date; Address?: string; City?: string; Region?: string; Postal_Code?: string; Country?: string; Home_Phone?: string; Extension?: string; Photo?: $data.Blob; Notes?: string; Reports_To?: number; Orders?: NorthwindModel.Order[]; }) => NorthwindModel.Employee;
  }

  class Order_Detail extends $data.Entity {
    constructor ();
    constructor (initData: { Order_ID?: number; Product_ID?: number; Unit_Price?: number; Quantity?: number; Discount?: number; Product?: NorthwindModel.Product; Order?: NorthwindModel.Order; });
    Order_ID: number;
    Product_ID: number;
    Unit_Price: number;
    Quantity: number;
    Discount: number;
    Product: NorthwindModel.Product;
    Order: NorthwindModel.Order;
    
  }

  export interface Order_DetailQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Order_Detail) => bool): NorthwindModel.Order_DetailQueryable;
    filter(predicate:(it: NorthwindModel.Order_Detail) => bool, thisArg: any): NorthwindModel.Order_DetailQueryable;

    map(projection: (it: NorthwindModel.Order_Detail) => any): NorthwindModel.Order_DetailQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Order_Detail) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Order_Detail[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Order_Detail[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Order_Detail, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Order_Detail) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Order_Detail, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Order_Detail[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.Order_DetailQueryable;
    skip(amout: number): NorthwindModel.Order_DetailQueryable;

    order(selector: string): NorthwindModel.Order_DetailQueryable;
    orderBy(predicate: (it: NorthwindModel.Order_Detail) => any): NorthwindModel.Order_DetailQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Order_Detail) => any): NorthwindModel.Order_DetailQueryable;
    
    first(predicate: (it: NorthwindModel.Order_Detail, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Order_Detail) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Order_Detail, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Order_Detail[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.Order_DetailQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface Order_DetailSet extends Order_DetailQueryable {
    add(initData: { Order_ID?: number; Product_ID?: number; Unit_Price?: number; Quantity?: number; Discount?: number; Product?: NorthwindModel.Product; Order?: NorthwindModel.Order; }): NorthwindModel.Order_Detail;
    add(item: NorthwindModel.Order_Detail): NorthwindModel.Order_Detail;

    attach(item: NorthwindModel.Order_Detail): void;
    attach(item: { Order_ID: number; Product_ID: number; }): void;
    attachOrGet(item: NorthwindModel.Order_Detail): NorthwindModel.Order_Detail;
    attachOrGet(item: { Order_ID: number; Product_ID: number; }): NorthwindModel.Order_Detail;

    detach(item: NorthwindModel.Order_Detail): void;
    detach(item: { Order_ID: number; Product_ID: number; }): void;

    remove(item: NorthwindModel.Order_Detail): void;
    remove(item: { Order_ID: number; Product_ID: number; }): void;
    
    elementType: new (initData: { Order_ID?: number; Product_ID?: number; Unit_Price?: number; Quantity?: number; Discount?: number; Product?: NorthwindModel.Product; Order?: NorthwindModel.Order; }) => NorthwindModel.Order_Detail;
  }

  class Order extends $data.Entity {
    constructor ();
    constructor (initData: { Order_ID?: number; Customer_ID?: string; Employee_ID?: number; Ship_Name?: string; Ship_Address?: string; Ship_City?: string; Ship_Region?: string; Ship_Postal_Code?: string; Ship_Country?: string; Ship_Via?: number; Order_Date?: Date; Required_Date?: Date; Shipped_Date?: Date; Freight?: number; Customer?: NorthwindModel.Customer; Employee?: NorthwindModel.Employee; Order_Details?: NorthwindModel.Order_Detail[]; Shipper?: NorthwindModel.Shipper; });
    Order_ID: number;
    Customer_ID: string;
    Employee_ID: number;
    Ship_Name: string;
    Ship_Address: string;
    Ship_City: string;
    Ship_Region: string;
    Ship_Postal_Code: string;
    Ship_Country: string;
    Ship_Via: number;
    Order_Date: Date;
    Required_Date: Date;
    Shipped_Date: Date;
    Freight: number;
    Customer: NorthwindModel.Customer;
    Employee: NorthwindModel.Employee;
    Order_Details: NorthwindModel.Order_Detail[];
    Shipper: NorthwindModel.Shipper;
    
  }

  export interface OrderQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Order) => bool): NorthwindModel.OrderQueryable;
    filter(predicate:(it: NorthwindModel.Order) => bool, thisArg: any): NorthwindModel.OrderQueryable;

    map(projection: (it: NorthwindModel.Order) => any): NorthwindModel.OrderQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Order) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Order[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Order[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Order, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Order) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Order, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Order[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.OrderQueryable;
    skip(amout: number): NorthwindModel.OrderQueryable;

    order(selector: string): NorthwindModel.OrderQueryable;
    orderBy(predicate: (it: NorthwindModel.Order) => any): NorthwindModel.OrderQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Order) => any): NorthwindModel.OrderQueryable;
    
    first(predicate: (it: NorthwindModel.Order, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Order) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Order, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Order[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.OrderQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface OrderSet extends OrderQueryable {
    add(initData: { Order_ID?: number; Customer_ID?: string; Employee_ID?: number; Ship_Name?: string; Ship_Address?: string; Ship_City?: string; Ship_Region?: string; Ship_Postal_Code?: string; Ship_Country?: string; Ship_Via?: number; Order_Date?: Date; Required_Date?: Date; Shipped_Date?: Date; Freight?: number; Customer?: NorthwindModel.Customer; Employee?: NorthwindModel.Employee; Order_Details?: NorthwindModel.Order_Detail[]; Shipper?: NorthwindModel.Shipper; }): NorthwindModel.Order;
    add(item: NorthwindModel.Order): NorthwindModel.Order;

    attach(item: NorthwindModel.Order): void;
    attach(item: { Order_ID: number; }): void;
    attachOrGet(item: NorthwindModel.Order): NorthwindModel.Order;
    attachOrGet(item: { Order_ID: number; }): NorthwindModel.Order;

    detach(item: NorthwindModel.Order): void;
    detach(item: { Order_ID: number; }): void;

    remove(item: NorthwindModel.Order): void;
    remove(item: { Order_ID: number; }): void;
    
    elementType: new (initData: { Order_ID?: number; Customer_ID?: string; Employee_ID?: number; Ship_Name?: string; Ship_Address?: string; Ship_City?: string; Ship_Region?: string; Ship_Postal_Code?: string; Ship_Country?: string; Ship_Via?: number; Order_Date?: Date; Required_Date?: Date; Shipped_Date?: Date; Freight?: number; Customer?: NorthwindModel.Customer; Employee?: NorthwindModel.Employee; Order_Details?: NorthwindModel.Order_Detail[]; Shipper?: NorthwindModel.Shipper; }) => NorthwindModel.Order;
  }

  class Product extends $data.Entity {
    constructor ();
    constructor (initData: { Product_ID?: number; Supplier_ID?: number; Category_ID?: number; Product_Name?: string; English_Name?: string; Quantity_Per_Unit?: string; Unit_Price?: number; Units_In_Stock?: number; Units_On_Order?: number; Reorder_Level?: number; Discontinued?: bool; Category?: NorthwindModel.Category; Order_Details?: NorthwindModel.Order_Detail[]; Supplier?: NorthwindModel.Supplier; });
    Product_ID: number;
    Supplier_ID: number;
    Category_ID: number;
    Product_Name: string;
    English_Name: string;
    Quantity_Per_Unit: string;
    Unit_Price: number;
    Units_In_Stock: number;
    Units_On_Order: number;
    Reorder_Level: number;
    Discontinued: bool;
    Category: NorthwindModel.Category;
    Order_Details: NorthwindModel.Order_Detail[];
    Supplier: NorthwindModel.Supplier;
    
  }

  export interface ProductQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Product) => bool): NorthwindModel.ProductQueryable;
    filter(predicate:(it: NorthwindModel.Product) => bool, thisArg: any): NorthwindModel.ProductQueryable;

    map(projection: (it: NorthwindModel.Product) => any): NorthwindModel.ProductQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Product) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Product[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Product[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Product, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Product) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Product, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Product[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.ProductQueryable;
    skip(amout: number): NorthwindModel.ProductQueryable;

    order(selector: string): NorthwindModel.ProductQueryable;
    orderBy(predicate: (it: NorthwindModel.Product) => any): NorthwindModel.ProductQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Product) => any): NorthwindModel.ProductQueryable;
    
    first(predicate: (it: NorthwindModel.Product, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Product) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Product, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Product[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.ProductQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface ProductSet extends ProductQueryable {
    add(initData: { Product_ID?: number; Supplier_ID?: number; Category_ID?: number; Product_Name?: string; English_Name?: string; Quantity_Per_Unit?: string; Unit_Price?: number; Units_In_Stock?: number; Units_On_Order?: number; Reorder_Level?: number; Discontinued?: bool; Category?: NorthwindModel.Category; Order_Details?: NorthwindModel.Order_Detail[]; Supplier?: NorthwindModel.Supplier; }): NorthwindModel.Product;
    add(item: NorthwindModel.Product): NorthwindModel.Product;

    attach(item: NorthwindModel.Product): void;
    attach(item: { Product_ID: number; }): void;
    attachOrGet(item: NorthwindModel.Product): NorthwindModel.Product;
    attachOrGet(item: { Product_ID: number; }): NorthwindModel.Product;

    detach(item: NorthwindModel.Product): void;
    detach(item: { Product_ID: number; }): void;

    remove(item: NorthwindModel.Product): void;
    remove(item: { Product_ID: number; }): void;
    
    elementType: new (initData: { Product_ID?: number; Supplier_ID?: number; Category_ID?: number; Product_Name?: string; English_Name?: string; Quantity_Per_Unit?: string; Unit_Price?: number; Units_In_Stock?: number; Units_On_Order?: number; Reorder_Level?: number; Discontinued?: bool; Category?: NorthwindModel.Category; Order_Details?: NorthwindModel.Order_Detail[]; Supplier?: NorthwindModel.Supplier; }) => NorthwindModel.Product;
  }

  class Shipper extends $data.Entity {
    constructor ();
    constructor (initData: { Shipper_ID?: number; Company_Name?: string; Orders?: NorthwindModel.Order[]; });
    Shipper_ID: number;
    Company_Name: string;
    Orders: NorthwindModel.Order[];
    
  }

  export interface ShipperQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Shipper) => bool): NorthwindModel.ShipperQueryable;
    filter(predicate:(it: NorthwindModel.Shipper) => bool, thisArg: any): NorthwindModel.ShipperQueryable;

    map(projection: (it: NorthwindModel.Shipper) => any): NorthwindModel.ShipperQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Shipper) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Shipper[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Shipper[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Shipper, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Shipper) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Shipper, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Shipper[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.ShipperQueryable;
    skip(amout: number): NorthwindModel.ShipperQueryable;

    order(selector: string): NorthwindModel.ShipperQueryable;
    orderBy(predicate: (it: NorthwindModel.Shipper) => any): NorthwindModel.ShipperQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Shipper) => any): NorthwindModel.ShipperQueryable;
    
    first(predicate: (it: NorthwindModel.Shipper, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Shipper) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Shipper, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Shipper[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.ShipperQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface ShipperSet extends ShipperQueryable {
    add(initData: { Shipper_ID?: number; Company_Name?: string; Orders?: NorthwindModel.Order[]; }): NorthwindModel.Shipper;
    add(item: NorthwindModel.Shipper): NorthwindModel.Shipper;

    attach(item: NorthwindModel.Shipper): void;
    attach(item: { Shipper_ID: number; }): void;
    attachOrGet(item: NorthwindModel.Shipper): NorthwindModel.Shipper;
    attachOrGet(item: { Shipper_ID: number; }): NorthwindModel.Shipper;

    detach(item: NorthwindModel.Shipper): void;
    detach(item: { Shipper_ID: number; }): void;

    remove(item: NorthwindModel.Shipper): void;
    remove(item: { Shipper_ID: number; }): void;
    
    elementType: new (initData: { Shipper_ID?: number; Company_Name?: string; Orders?: NorthwindModel.Order[]; }) => NorthwindModel.Shipper;
  }

  class Supplier extends $data.Entity {
    constructor ();
    constructor (initData: { Supplier_ID?: number; Company_Name?: string; Contact_Name?: string; Contact_Title?: string; Address?: string; City?: string; Region?: string; Postal_Code?: string; Country?: string; Phone?: string; Fax?: string; Products?: NorthwindModel.Product[]; });
    Supplier_ID: number;
    Company_Name: string;
    Contact_Name: string;
    Contact_Title: string;
    Address: string;
    City: string;
    Region: string;
    Postal_Code: string;
    Country: string;
    Phone: string;
    Fax: string;
    Products: NorthwindModel.Product[];
    
  }

  export interface SupplierQueryable extends $data.Queryable {
    filter(predicate:(it: NorthwindModel.Supplier) => bool): NorthwindModel.SupplierQueryable;
    filter(predicate:(it: NorthwindModel.Supplier) => bool, thisArg: any): NorthwindModel.SupplierQueryable;

    map(projection: (it: NorthwindModel.Supplier) => any): NorthwindModel.SupplierQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: NorthwindModel.Supplier) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: NorthwindModel.Supplier[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: NorthwindModel.Supplier[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: NorthwindModel.Supplier, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Supplier) => void): $data.IPromise;
    single(predicate: (it: NorthwindModel.Supplier, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Supplier[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): NorthwindModel.SupplierQueryable;
    skip(amout: number): NorthwindModel.SupplierQueryable;

    order(selector: string): NorthwindModel.SupplierQueryable;
    orderBy(predicate: (it: NorthwindModel.Supplier) => any): NorthwindModel.SupplierQueryable;
    orderByDescending(predicate: (it: NorthwindModel.Supplier) => any): NorthwindModel.SupplierQueryable;
    
    first(predicate: (it: NorthwindModel.Supplier, params?: any) => bool, params?: any, handler?: (result: NorthwindModel.Supplier) => void): $data.IPromise;
    first(predicate: (it: NorthwindModel.Supplier, params?: any) => bool, params?: any, handler?: { success?: (result: NorthwindModel.Supplier[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): NorthwindModel.SupplierQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface SupplierSet extends SupplierQueryable {
    add(initData: { Supplier_ID?: number; Company_Name?: string; Contact_Name?: string; Contact_Title?: string; Address?: string; City?: string; Region?: string; Postal_Code?: string; Country?: string; Phone?: string; Fax?: string; Products?: NorthwindModel.Product[]; }): NorthwindModel.Supplier;
    add(item: NorthwindModel.Supplier): NorthwindModel.Supplier;

    attach(item: NorthwindModel.Supplier): void;
    attach(item: { Supplier_ID: number; }): void;
    attachOrGet(item: NorthwindModel.Supplier): NorthwindModel.Supplier;
    attachOrGet(item: { Supplier_ID: number; }): NorthwindModel.Supplier;

    detach(item: NorthwindModel.Supplier): void;
    detach(item: { Supplier_ID: number; }): void;

    remove(item: NorthwindModel.Supplier): void;
    remove(item: { Supplier_ID: number; }): void;
    
    elementType: new (initData: { Supplier_ID?: number; Company_Name?: string; Contact_Name?: string; Contact_Title?: string; Address?: string; City?: string; Region?: string; Postal_Code?: string; Country?: string; Phone?: string; Fax?: string; Products?: NorthwindModel.Product[]; }) => NorthwindModel.Supplier;
  }

}

module NorthwindEntities {
  export class NorthwindEntities extends $data.EntityContext {
    onReady(): $data.IPromise;
    onReady(handler: (context: NorthwindEntities) => void): $data.IPromise;
    Categories: NorthwindModel.CategorySet;
    Customers: NorthwindModel.CustomerSet;
    Employees: NorthwindModel.EmployeeSet;
    Order_Details: NorthwindModel.Order_DetailSet;
    Orders: NorthwindModel.OrderSet;
    Products: NorthwindModel.ProductSet;
    Shippers: NorthwindModel.ShipperSet;
    Suppliers: NorthwindModel.SupplierSet;
    
  }
}
